import streamlit as st
import pandas as pd
import requests
from io import StringIO
import numpy as np
import base64
import os
import sys 
import plotly.express as px
from streamlit_autorefresh import st_autorefresh

# === CONFIG GOOGLE SHEET ===
GSHEET_URL = "https://docs.google.com/spreadsheets/d/19Jcdw6ONUgRRj1IYcD7m8XruMAdrMReg/export?format=csv&gid=759908915"

# === C√ÅC ƒê∆Ø·ªúNG D·∫™N ·∫¢NH C·ª§C B·ªò (H√ÉY ƒê·∫¢M B·∫¢O PH·∫¶N M·ªû R·ªòNG ƒê√öNG) ===
HINHNEN_PATH = "images/HINHNEN.png"   
LOGO_PATH = "images/Logo-VNPT.png"     


DISPLAY_COLUMNS = [
    'Ng√†y nh·∫≠n', 'KHO', 'T√äN V·∫¨T T∆Ø', 'Thi·∫øt b·ªã', 'ƒêVT', 'SL', 'M√É VT',
    'Serial', 'Serial-ƒêHSX', 'CƒÇN C·ª® (C√¥ng vƒÉn)', 'DP/Giao', 'GHI CH√ö', 'Ng∆∞·ªùi c·∫≠p nh·∫≠t'
]
SEARCH_COLUMNS = ['T√äN V·∫¨T T∆Ø', 'Serial']


# === H√ÄM T·∫¢I ·∫¢NH T·ª™ C·ª§C B·ªò V√Ä CHUY·ªÇN SANG BASE64 ===
def get_base64_image(image_path):
    """T·∫£i ·∫£nh t·ª´ c·ª•c b·ªô b·∫±ng ƒë∆∞·ªùng d·∫´n t∆∞∆°ng ƒë·ªëi."""
    current_path = ""
    
    if os.path.exists(image_path):
        current_path = image_path
    else:
        # X·ª≠ l√Ω ƒë∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi (d·ª± ph√≤ng)
        base_path = os.path.dirname(os.path.abspath(__file__)) if os.path.exists(os.path.abspath(__file__)) else os.getcwd()
        full_path = os.path.join(base_path, image_path)
        if os.path.exists(full_path):
             current_path = full_path

    if not current_path:
        return ""

    try:
        with open(current_path, "rb") as img_file:
            return base64.b64encode(img_file.read()).decode()
    except Exception:
        return ""


# === CLEAN COLUMN ===
def clean_and_normalize_column(col_name):
    if pd.isna(col_name):
        return ""
    cleaned_name = str(col_name).strip().replace('\ufeff', '').replace('\xa0', '')
    return cleaned_name.strip()

# === CSV CONVERT ===
def convert_df_to_csv(df):
    df_temp = df.copy()
    for col in df_temp.columns:
        if df_temp[col].dtype == np.int64:
            df_temp[col] = df_temp[col].astype(int) 
    return df_temp.to_csv(index=False).encode('utf-8')

# === LOAD DATA (D√ôNG CACHE M·ªöI) ===
# D√πng @st.cache_data (y√™u c·∫ßu Streamlit >= 1.18.0)
@st.cache_data(ttl=300, show_spinner="ƒêang t·∫£i d·ªØ li·ªáu t·ª´ Google Sheet...") 
def load_data(url):
    response = requests.get(url)
    response.encoding = 'utf-8'
    df = pd.read_csv(StringIO(response.text), encoding='utf-8', header=0)
    df.columns = df.columns.astype(str).map(clean_and_normalize_column)
    df.dropna(how='all', inplace=True)

    if 'SL' in df.columns:
        df['SL'] = pd.to_numeric(df['SL'], errors='coerce').fillna(0).astype(np.int64)
    if 'Ng√†y nh·∫≠n' in df.columns:
        df['Ng√†y nh·∫≠n DT'] = pd.to_datetime(df['Ng√†y nh·∫≠n'], errors='coerce', dayfirst=True)
        df['Ng√†y nh·∫≠n'] = df['Ng√†y nh·∫≠n DT'].dt.strftime('%d/%m/%Y').fillna('Kh√¥ng r√µ')
    return df

# === RESET FILTER ===
def reset_filters():
    for key in ['vattu_filter', 'date_filter', 'search_query', 'input_search', 'vattu_filter_old', 'date_filter_old']:
        if 'filter' in key or 'old' in key:
            st.session_state[key] = 'T·∫•t c·∫£'
        elif 'search' in key:
            st.session_state[key] = ""

# === H√ÄM X√ìA CACHE ƒê·ªòC L·∫¨P V√Ä RELOAD (D√ôNG C√ö PH√ÅP M·ªöI) ===
def clear_cache_and_rerun():
    # S·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c x√≥a cache m·ªõi v√† an to√†n nh·∫•t
    st.cache_data.clear() 
    st.cache_resource.clear()
    st.rerun() 
    
def app():
    st.set_page_config(page_title="T√¨m Ki·∫øm V·∫≠t T∆∞", layout="wide", initial_sidebar_state="expanded") 
    st_autorefresh(interval=300000, key="data_refresh") # T·ª± ƒë·ªông l√†m m·ªõi 5 ph√∫t

    # === T·∫¢I H√åNH N·ªÄN V√Ä LOGO B·∫∞NG BASE64 ===
    HINHNEN_BASE64 = get_base64_image(HINHNEN_PATH)
    LOGO_BASE64 = get_base64_image(LOGO_PATH)
    
    # === X√ÅC ƒê·ªäNH ƒê·ªäNH D·∫†NG MIME TYPE CHO H√åNH N·ªÄN ===
    mime_type = "image/png" 
    if HINHNEN_PATH.lower().endswith(('.jpg', '.jpeg')):
        mime_type = "image/jpeg"

    # === KH·ªêI CSS CHUNG ===
    
    # 1. CSS Cho Background
    if HINHNEN_BASE64:
        background_style = f"""
            <style>
            body {{
                background-image: url("data:{mime_type};base64,{HINHNEN_BASE64}"); 
                background-size: cover; 
                background-attachment: fixed; 
                background-position: center;
            }}
            /* ƒê·∫£m b·∫£o c√°c th√†nh ph·∫ßn Streamlit trong su·ªët */
            .stApp, .main, [data-testid="stSidebar"] > div, footer {{ 
                background-color: transparent !important; 
            }}
            </style>
            """
        st.markdown(background_style, unsafe_allow_html=True)

    # 2. CSS Chung Cho Ti√™u ƒë·ªÅ, H·ªôp, etc.
    general_styles = f"""
        <style>
        
        /* === CSS CHO H1 (G·ªôp hai d√≤ng ch√≠nh v√† logo) === */
        h1 {{
            text-align: center;
            color: #004780 !important; 
            font-weight: 900 !important; 
            font-size: 3rem; 
            margin: 0 !important;
            line-height: 1.1; 
            padding-top: 20px; 
        }}
        h1 .subtitle {{
            display: block; 
            font-weight: bold !important;
            font-size: 1.8rem; 
            color: #004780 !important;
            margin-top: 0.1em; 
            margin-bottom: 0 !important;
        }}
        /* === CSS CHO H2 (Ti√™u ƒë·ªÅ Tab v√† Th·ªëng k√™) === */
        h2 {{ 
            color: #004780 !important; 
            font-weight: bold;
            font-size: 2rem; 
            text-align: left !important;
            margin: 0.5em 0 0.2em !important; 
        }}
        /* === CSS CHO H3 (T√¨m ki·∫øm) === */
        h3 {{ 
            color: #004780 !important; 
            font-weight: bold;
            font-size: 1.8rem;
            margin: 0.1em 0 0.2em !important;
        }}
        /* === CSS CHO H4 (D·ªØ li·ªáu sau l·ªçc) === */
        h4 {{
            color: #004780 !important;
            font-weight: bold;
            font-size: 1.6rem;
            text-align: left !important;
            margin: 0.5em 0 0.2em !important;
        }}
        /* === S·ª¨A KHO·∫¢NG C√ÅCH C·ª¶A D·∫§U G·∫†CH NGANG (HR) === */
        hr {{
            margin-top: 0.5rem !important;
            margin-bottom: 1rem !important;
        }}
        </style>
    """
    st.markdown(general_styles, unsafe_allow_html=True)

    # === HEADER (H1, Logo v√† H1 subtitle) ===
    col_logo, col_title = st.columns([1, 8])

    with col_logo:
        # Logo VNPT (d√πng Base64 cho ƒë·ªô tin c·∫≠y cao nh·∫•t)
        if LOGO_BASE64:
             st.markdown(
                 f"""
                 <img src="data:image/png;base64,{LOGO_BASE64}" width="100">
                 """, unsafe_allow_html=True
             )
        else:
             # Bi·ªán ph√°p d·ª± ph√≤ng n·∫øu kh√¥ng t√¨m th·∫•y file logo
             st.markdown("<h2 style='text-align:center;'>üåê</h2>", unsafe_allow_html=True)
            
    with col_title:
        # H1: G·ªôp c·∫£ hai d√≤ng
        st.markdown(
            f"""
            <h1>
                ·ª®ng D·ª•ng Qu·∫£n L√Ω & Tra C·ª©u V·∫≠t T∆∞ V√¥ Tuy·∫øn 
                <span class="subtitle">Tr·∫°m Vi·ªÖn Th√¥ng ƒê·∫Øk N√¥ng</span>
            </h1>
            """,
            unsafe_allow_html=True
        )

    st.markdown("---")

    # === INIT SESSION ===
    defaults = {'search_query':"", 'vattu_filter':'T·∫•t c·∫£', 'date_filter':'T·∫•t c·∫£',
                'vattu_filter_old':'T·∫•t c·∫£', 'date_filter_old':'T·∫•t c·∫£', 'input_search':''}
    for k,v in defaults.items():
        if k not in st.session_state: st.session_state[k] = v

    # === LOAD DATA ===
    try:
        df = load_data(GSHEET_URL)
    except Exception as e:
        st.error(f"‚ùå L·ªói t·∫£i d·ªØ li·ªáu. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng v√† URL: {e}")
        return
        
    if df.empty:
        st.error("‚ùå Kh√¥ng t·∫£i ƒë∆∞·ª£c d·ªØ li·ªáu t·ª´ Google Sheet.")
        return
        
    df_filtered = df.copy()

    # === SIDEBAR FILTER ===
    st.sidebar.title("üõ†Ô∏è B·ªô L·ªçc")

    if 'T√äN V·∫¨T T∆Ø' in df.columns:
        list_vattu = ['T·∫•t c·∫£'] + sorted(df['T√äN V·∫¨T T∆Ø'].dropna().unique())
        st.sidebar.selectbox("T√™n V·∫≠t T∆∞:", list_vattu, key='vattu_filter') 
        
        if st.session_state.vattu_filter != st.session_state.vattu_filter_old:
            st.session_state.date_filter = 'T·∫•t c·∫£'
            st.session_state.vattu_filter_old = st.session_state.vattu_filter
            st.rerun() 

        if st.session_state.vattu_filter != 'T·∫•t c·∫£':
            df_filtered = df_filtered[df_filtered['T√äN V·∫¨T T∆Ø'] == st.session_state.vattu_filter]

    if 'Ng√†y nh·∫≠n' in df.columns:
        date_list = sorted(df_filtered['Ng√†y nh·∫≠n'].loc[df_filtered['Ng√†y nh·∫≠n'] != 'Kh√¥ng r√µ'].unique(),
                             key=lambda x: pd.to_datetime(x, format='%d/%m/%Y', errors='coerce'),
                             reverse=True)
        date_list = ['T·∫•t c·∫£'] + date_list
        st.sidebar.selectbox("Ng√†y nh·∫≠n:", date_list, key='date_filter')
        if st.session_state.date_filter != 'T·∫•t c·∫£':
            df_filtered = df_filtered[df_filtered['Ng√†y nh·∫≠n'] == st.session_state.date_filter]

    st.sidebar.markdown("---")
    
    col_ref, col_reset = st.sidebar.columns(2)
    
    # N√∫t F5 s·∫Ω g·ªçi h√†m x√≥a cache an to√†n
    if col_ref.button("üîÑ F5"): 
        clear_cache_and_rerun()
        
    if col_reset.button("üóëÔ∏è X√≥a"): 
        reset_filters()
        st.rerun() 

    st.sidebar.metric("T·ªïng v·∫≠t t∆∞ (G·ªëc)", f"{df['SL'].sum():,} c√°i")
    st.sidebar.caption(f"‚úÖ {len(df)} d√≤ng | T·ª± ƒë·ªông c·∫≠p nh·∫≠t m·ªói 5 ph√∫t")


    # === H2: TI√äU ƒê·ªÄ KH·ªêI TAB V√Ä PH√ÇN CHIA TAB ===
    st.markdown("<h2>üìä KH·ªêI TRA C·ª®U & TH·ªêNG K√ä</h2>", unsafe_allow_html=True) 

    tab1, tab2 = st.tabs(["üîç TRA C·ª®U & L·ªåC", "üìä TH·ªêNG K√ä NHANH"])

    # ====================================================
    #           TAB 1: TRA C·ª®U & L·ªåC
    # ====================================================
    with tab1: 
        # H3: Ti√™u ƒë·ªÅ T√¨m ki·∫øm
        st.subheader("üîç T√¨m Ki·∫øm V·∫≠t T∆∞ ho·∫∑c Serial")
        
        # H·ªôp t√¨m ki·∫øm (S·ª≠ d·ª•ng 1 c·ªôt duy nh·∫•t, kh√¥ng c√≥ n√∫t X√≥a)
        tu_khoa = st.text_input("Nh·∫≠p t·ª´ kh√≥a:", placeholder="V√≠ d·ª•: AHEB, L615...",
                                        value=st.session_state.search_query).strip()
        
        if tu_khoa != st.session_state.search_query:
            st.session_state.search_query = tu_khoa
            st.rerun()
        
        cols_to_display = [c for c in DISPLAY_COLUMNS if c in df_filtered.columns]

        if st.session_state.search_query:
            tu_khoa = st.session_state.search_query
            mask = pd.Series(False, index=df_filtered.index)
            for c in [x for x in SEARCH_COLUMNS if x in df_filtered.columns]:
                if c in df_filtered.columns:
                    mask |= df_filtered[c].astype(str).str.contains(tu_khoa, case=False, na=False)
            result = df_filtered[mask]
            if not result.empty:
                # H4: Ti√™u ƒë·ªÅ K·∫øt qu·∫£
                st.markdown(f"<h4>K·∫øt Qu·∫£: '{tu_khoa}' ({len(result)} d√≤ng)</h4>", unsafe_allow_html=True)
                st.dataframe(result[cols_to_display], height=500) 
                st.download_button("üì• T·∫£i K·∫øt Qu·∫£", convert_df_to_csv(result),
                                    file_name='KetQua_Tim_Kiem.csv', mime='text/csv')
            else:
                st.warning("Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ n√†o.")
        else:
            # H4: Ti√™u ƒë·ªÅ D·ªØ li·ªáu sau khi l·ªçc
            st.markdown("<h4>üìã D·ªØ Li·ªáu Sau Khi L·ªçc</h4>", unsafe_allow_html=True)
            
            st.dataframe(df_filtered[cols_to_display], height=500) 
            st.download_button("üì• T·∫£i D·ªØ Li·ªáu", convert_df_to_csv(df_filtered),
                                file_name='DuLieu_Loc.csv', mime='text/csv')

    # ====================================================
    #           TAB 2: TH·ªêNG K√ä NHANH
    # ====================================================
    with tab2: 
        # H2: Ti√™u ƒë·ªÅ Th·ªëng k√™ (s·ª≠ d·ª•ng st.header, ƒë√£ cƒÉn tr√°i trong CSS)
        st.header("üìà Th·ªëng K√™ T·ªïng Quan V·∫≠t T∆∞")

        if 'SL' in df.columns:
            total_sl = df['SL'].sum()
            total_rows = len(df)
            col_t1, col_t2 = st.columns(2)
            col_t1.metric("T·ªïng S·ªë L∆∞·ª£ng V·∫≠t T∆∞ (G·ªëc)", f"{total_sl:,} c√°i")
            col_t2.metric("T·ªïng S·ªë D√≤ng D·ªØ Li·ªáu", f"{total_rows:,} d√≤ng")
        
        st.markdown("---")

        if 'T√äN V·∫¨T T∆Ø' in df.columns and 'SL' in df.columns:
            tk_vattu = df.groupby('T√äN V·∫¨T T∆Ø')['SL'].sum().reset_index()
            tk_vattu.rename(columns={'SL': 'T·ªïng S·ªë L∆∞·ª£ng'}, inplace=True) 

            # H3: Ti√™u ƒë·ªÅ Ph√¢n ph·ªëi
            st.subheader("Ph√¢n Ph·ªëi S·ªë L∆∞·ª£ng Theo Lo·∫°i V·∫≠t T∆∞ (Top 10)")
            fig_pie = px.pie(tk_vattu.head(10), values='T·ªïng S·ªë L∆∞·ª£ng', names='T√äN V·∫¨T T∆Ø',
                              title='Top 10 Lo·∫°i V·∫≠t T∆∞ Theo S·ªë L∆∞·ª£ng', hole=.3)
            st.plotly_chart(fig_pie)

            st.download_button("üì• T·∫£i B·∫£ng Th·ªëng K√™ Lo·∫°i", data=convert_df_to_csv(tk_vattu),
                                file_name='ThongKe_Loai_VatTu.csv', mime='text/csv')

        st.markdown("---")

        if 'Ng√†y nh·∫≠n DT' in df.columns: 
            df_temp = df.copy()
            
            seven_days_ago = pd.Timestamp('today').normalize() - pd.Timedelta(days=7)
            
            recent_updates = df_temp[df_temp['Ng√†y nh·∫≠n DT'] >= seven_days_ago]
            updates_daily = recent_updates.groupby('Ng√†y nh·∫≠n DT').size().reset_index(name='S·ªë L·∫ßn C·∫≠p Nh·∫≠t')
            
            # H3: Ti√™u ƒë·ªÅ C·∫≠p nh·∫≠t
            st.subheader("S·ªë L·∫ßn C·∫≠p Nh·∫≠t D·ªØ Li·ªáu Trong 7 Ng√†y G·∫ßn Nh·∫•t")
            if not updates_daily.empty:
                updates_daily['Ng√†y nh·∫≠n DT'] = updates_daily['Ng√†y nh·∫≠n DT'].dt.strftime('%d/%m')
                fig_line = px.line(updates_daily, x='Ng√†y nh·∫≠n DT', y='S·ªë L·∫ßn C·∫≠p Nh·∫≠t', 
                                    title='T·∫ßn su·∫•t C·∫≠p Nh·∫≠t (7 Ng√†y)', markers=True)
                st.plotly_chart(fig_line)
            else:
                st.info("Ch∆∞a c√≥ c·∫≠p nh·∫≠t n√†o trong 7 ng√†y g·∫ßn nh·∫•t.")


if __name__ == "__main__":
    app()